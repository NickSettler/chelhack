$levels: (
    //       1920   1440   768   414    320
    yellow: (136px  116px  96px  116px  96px), 
    orange: (88px   72px   60px  88px   72px),
    red:    (44px   36px   32px  44px   32px),
    pink:   (36px   32px   28px  36px   26px),
    green:  (24px   22px   20px  24px   18px),
    blue:   (20px   18px   16px  20px   16px),
    cyan:   (16px   16px   14px  16px   12px),
    gray:   (8px    8px    8px   8px    8px),
);

$breakpointLevels: (
    all: 1,
    laptop: 2,
    tablet: 3,
    mobile_large: 4,
    mobile_small: 5,
);

@mixin offset($side, $type, $size, $device: all, $important: false, $negative: false){
    @if $device == all {
        @include _apply_offset($side, $type, $size, 1, $important, $negative);
    }
    @for $i from 2 through length(map-keys($breakpointLevels)){
        @include media_query(nth(map-keys($breakpointLevels), $i)){
            $allowedDevicesList: ();
            @for $j from $i through 2 {
                $allowedDevicesList: append($allowedDevicesList, nth(map-keys($breakpointLevels), $j));
            }
            @if $device == all or index($allowedDevicesList, $device) != null{
                @include _apply_offset($side, $type, $size, nth(map-values($breakpointLevels), $i), $important, $negative);
            }
        }
    }
    // @include media_query(laptop){
    //     @if $device == all or index((laptop), $device) != null{
    //         @include _apply_offset($side, $type, $size, 2);
    //     }
    // }
    // @include media_query(tablet){
    //     @if $device == all or index((laptop, tablet), $device) != null{
    //         @include _apply_offset($side, $type, $size, 3);
    //     }
    // }
    // @include media_query(mobile_large){
    //     @if $device == all or index((laptop, tablet, mobile_large), $device) != null{
    //         @include _apply_offset($side, $type, $size, 4);
    //     }
    // }
    // @include media_query(mobile_small){
    //     @if $device == all or index((laptop, tablet, mobile_large, mobile_small), $device) != null{
    //         @include _apply_offset($side, $type, $size, 5);
    //     }
    // }
}

@mixin offset_only($side, $type, $size, $device){
    @include media_query($device){
        @include _apply_offset($side, $type, $size, map-get($breakpointLevels, $device), true);
    }
}

@mixin _apply_offset($type, $side, $level, $level_index, $important: false, $negative: false){
    @if $side == top {
        @if $type == padding {
            @if $level == 0{
                padding-top: 0;
            }@else if $level > 0 and $level < 9{
                padding-top: _apply_level($level, $level_index, $negative) if($important, !important, null);
            }@else{
                @error "$level должен быть больше или равен нулю и меньше 9";
            }
        }@else if $type == margin{
            @if $level == 0{
                margin-top: 0;
            }@else if $level > 0 and $level < 9{
                margin-top: _apply_level($level, $level_index, $negative) if($important, !important, null);
            }@else{
                @error "$level должен быть больше или равен нулю и меньше 9";
            }
        }@else{
            @error "$type должен быть margin или padding";
        }
    }@else if $side == bottom {
        @if $type == padding {
            @if $level == 0{
                padding-bottom: 0;
            }@else if $level > 0 and $level < 9{
                padding-bottom: _apply_level($level, $level_index, $negative) if($important, !important, null);
            }@else{
                @error "$level должен быть больше или равен нулю и меньше 9";
            }
        }@else if $type == margin{
            @if $level == 0{
                margin-bottom: 0;
            }@else if $level > 0 and $level < 9{
                margin-bottom: _apply_level($level, $level_index, $negative) if($important, !important, null);
            }@else{
                @error "$level должен быть больше или равен нулю и меньше 9";
            }
        }@else{
            @error "$type должен быть margin или padding";
        }
    }@else{
        @error "$side должен быть top или bottom";
    }
}

@function _apply_level($level, $level_index, $negative: false){
    @if $negative {
        @return -1 * nth(map-get($levels, nth(map-keys($levels), $level)), $level_index);
    }
    @return nth(map-get($levels, nth(map-keys($levels), $level)), $level_index);
}