{"version":3,"sources":["components/Header/Header.js","classes/API.js","components/Good/Good.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Good","id","title","availability","price","finalPrice","category","availableInDays","brand","brandId","quantity","imageUrl","parameters","this","API","url","params","form","key","FormData","append","body","query","urlParams","URLSearchParams","result","fetch","fetched","buffer","json","text","request","mode","method","credentials","headers","array1","array2","length","i","goodsRaw","goods","data","map","good","localGoods","localStorage","getItem","setItem","JSON","stringify","parse","equal","getGoods","lazyLoadGoods","props","input","toLocaleString","src","process","formatPrice","Home","state","then","setState","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5cb4c36.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nclass Header extends React.Component{\n    render(){\n        return(\n            <header className=\"header\">\n                <div className=\"header__logo\">\n                    <span className=\"header__logo-letter\">B</span>\n                    <span className=\"header__logo-text\">Friday</span>\n                </div>\n                <nav className=\"header__menu\">\n                    <div className=\"header__link\">Smartphones</div>\n                    <div className=\"header__link\">Laptops</div>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default Header;","export class Good {\n    constructor({\n        id = null,\n        title = '',\n        availability = true,\n        price = 0,\n        finalPrice = 0,\n        category = '',\n        availableInDays = 0,\n        brand = '',\n        brandId = 0,\n        quantity = 0,\n        imageUrl = '',\n        parameters = []\n    } = {}) {\n        this.id = id;\n        this.title = title;\n        this.availability = availability;\n        this.price = price;\n        this.finalPrice = finalPrice;\n        this.category = category;\n        this.availableInDays = availableInDays;\n        this.brand = brand;\n        this.brandId = brandId;\n        this.quantity = quantity;\n        this.imageUrl = imageUrl;\n        this.parameters = parameters;\n    }\n}\n\nconst goods = [];\n\nexport default class API {\n    static async request(url, params = {}) {\n        if (params.form) {\n            // eslint-disable-next-line no-undef\n            const form = new FormData();\n\n            for (const key in params.form) {\n                form.append(key, params.form[key]);\n            }\n\n            params.body = form;\n        }\n\n        if (params.query) {\n            const urlParams = new URLSearchParams(params.query);\n\n            url += `?${urlParams}`;\n        }\n\n        let result = null;\n        // eslint-disable-next-line no-undef\n        const fetched = await fetch(url, params);\n\n        if (!params.buffer && !params.json) {\n            result = await fetched.text();\n        }\n\n        if (params.buffer) {\n            result = await fetched.buffer();\n        }\n\n        if (params.json) {\n            result = await fetched.json();\n        }\n\n        return result;\n    }\n\n    static getGoodsRaw() {\n        return API.request(\n            'http://chelhack.deletestaging.com/goods',\n            {\n                // json: true,\n                mode: 'cors',\n                method: 'GET',\n                credentials: \"same-origin\",\n                headers: {\n                    'Access-Control-Allow-Origin': '*',\n                    \"Origin\": \"http://chelhack.deletestaging.com/\"\n                }\n            }\n        );\n    }\n\n    static equal(array1, array2) {\n        if (array1.length !== array2.length) {\n            return false;\n        }\n        \n        for (let i in array1) {\n            if (!array2[i]) {\n                return false;\n            }\n            \n            if (array1[i].id !== array2[i].id) {\n                return false\n            }\n        }\n        \n        return true;\n    }\n\n    static async lazyLoadGoods() {\n        let goodsRaw = await API.request(\n            'http://10.100.67.127:8989/userapi/getGoods',\n            {\n                json: true\n            }\n        );\n\n        const goods = goodsRaw.data.map((good) => new Good(good));\n\n        let localGoods = localStorage.getItem('goods');\n\n        if (!localGoods) {\n            localStorage.setItem('goods', JSON.stringify(goods));\n\n            localGoods = localStorage.getItem('goods');\n        }\n\n        localGoods = JSON.parse(localGoods);\n\n        const isEqual = API.equal(goods, localGoods);\n\n        if (!isEqual) {\n            localStorage.setItem('goods', JSON.stringify(goods));\n        }\n    }\n\n    static async getGoods() {\n        const localGoods = localStorage.getItem('goods');\n\n        if (!localGoods) {\n            let goodsRaw = await API.request(\n                'http://10.100.67.127:8989/userapi/getGoods',\n                {\n                    json: true\n                }\n            );\n    \n            const goods = goodsRaw.data.map((good) => new Good(good));\n\n            localStorage.setItem('goods', JSON.stringify(goods));\n            \n            return await API.getGoods();\n        } else {\n            API.lazyLoadGoods();\n        }\n\n        return JSON.parse(localGoods);\n    }\n}","import React from \"react\";\nimport \"./Good.scss\";\n\nclass Good extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    formatPrice(input) {\n        return input.toLocaleString('en');\n    }\n\n    render(){\n        return (\n            <div className=\"good\">\n                <div className=\"good__image-block\">\n                    <img src={process.env.REACT_APP_BASE_API_URL+this.props.good.imageUrl} className=\"good__image\" />\n                </div>\n                <div className=\"good__content\">\n                    <span className=\"good__title\">\n                        {this.props.good.title}\n                    </span>\n                    <div className=\"good__down-block\">\n                        <span className=\"good__subtitle_old\">\n                            {this.formatPrice(this.props.good.price)+\" ₽\"}\n                        </span>\n                        <span className=\"good__subtitle_new\">\n                            {this.formatPrice(this.props.good.finalPrice)+\" ₽\"}\n                        </span>\n                        <div className=\"good__buttons\">\n                            <button className=\"good__button\">\n                                В корзину\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Good;","import React from \"react\";\nimport \"./Home.scss\";\nimport Header from \"../../components/Header/Header\";\nimport API from \"../../classes/API\";\nimport Good from \"../../components/Good/Good\";\n\nclass Home extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            goods: []\n        }\n    }\n\n    componentWillMount() {\n        API.getGoods().then(goods => {\n            this.setState({\n                ...this.state,\n                goods\n            });\n        })\n    }\n\n    componentWillUpdate() {\n    }\n\n    render(){\n        return(\n            <div className=\"home\">\n                <Header />\n                <div className=\"home__content\">\n                    {this.state.goods.map((good, i) => {\n                        return (\n                            <Good key={i} good = {good}/>\n                        )\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from \"react\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./pages/Home/Home\";\n\nclass App extends React.Component {\n    render(){\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact>\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}